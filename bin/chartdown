#!/usr/bin/env php
<?php

$args = array_merge(array(
	'h' => false,
), parseArgs($argv));

if (!isset($args[0])) {
	exit("Usage: chartdown infile [outfile]");
}


// Autoload
include_once(dirname(__FILE__).'/../src/ChartDown/Autoloader.php');
ChartDown_Autoloader::register();

$infile  = $args[0];
$ext     = $args['h'] ? 'html' : 'pdf';
$outfile = isset($args[1]) ? $args[1] : basename(substr($infile, 0, strrpos($infile, '.'))).'.'.$ext;

// Create chart object
$chartdown = new ChartDown_Environment();
$chart = $chartdown->loadChart(file_get_contents($infile));

// Create the PDF
$renderer = $args['h'] ? new ChartDown_Renderer_Html() : new ChartDown_Renderer_Pdf();
if ($renderer->render($chart, $outfile)) {
	echo "\nRendered File to $outfile";
} else {
	echo "\n Rendering failed!";
}

`open $outfile`;



/*********************/
/*  Helper Function  */
/*********************/

function parseArgs($argv){
    array_shift($argv);
    $out = array();
    foreach ($argv as $arg){
        if (substr($arg,0,2) == '--'){
            $eqPos = strpos($arg,'=');
            if ($eqPos === false){
                $key = substr($arg,2);
                $out[$key] = isset($out[$key]) ? $out[$key] : true;
            } else {
                $key = substr($arg,2,$eqPos-2);
                $out[$key] = substr($arg,$eqPos+1);
            }
        } else if (substr($arg,0,1) == '-'){
            if (substr($arg,2,1) == '='){
                $key = substr($arg,1,1);
                $out[$key] = substr($arg,3);
            } else {
                $chars = str_split(substr($arg,1));
                foreach ($chars as $char){
                    $key = $char;
                    $out[$key] = isset($out[$key]) ? $out[$key] : true;
                }
            }
        } else {
            $out[] = $arg;
        }
    }
    return $out;
}